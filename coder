#!/usr/bin/ruby

ALPHABET = [*("a".."z"), *("1".."9"), " "]
STRICT_ALPHABET = [*("a".."z"), *("A".."Z"), *("1".."9"), " ", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "+", "=", "{", "}", "[", "]", "|", "\\", '<', '>', '.', ',', '?', '/']

if File.file?(File.join(File.dirname(__FILE__), 'encryption.rb'))
  require_relative 'encryption.rb'
else
  require '/usr/share/ruby/vendor_ruby/coder/encryption.rb'
end
require 'optparse'

class String
  def clean_newlines sub = '[newline]'
    replace gsub "\n", sub
  end
end

m = :encrypt # method - encrypt or decrypt
s = false # strict? - true or false
t = "example text" # text - string
k = "examplekey" # key - string
f, o = nil # file input and output - strings

OptionParser.new do |parser|
  parser.banner = "Usage: coder [options]"

  parser.on("-h", "--help", "Show this help message") do
    puts parser
    exit
  end

  parser.on("-e", "--encrypt", "Encrypts text (default)") do
  end

  parser.on("-d", "--decrypt", "Decrypts text") do
    m = :decrypt
  end
  
  parser.on("-t", "--text TEXT", "The text to encrypt or decrypt") do |v|
    t = v
  end

  parser.on("-k", "--key KEY", "Specify a key to use") do |v|
    k = v
  end

  parser.on("-s", "--strict", "Keeps capital letters and encrypts punctuation") do
    s = true
  end
  
  parser.on("-f", "--file PATH", "Encrypt or decrypt a file instead") do |v|
    unless File.file? v
      puts "The path you entered does not exist or is not a file."
      exit
    end
    f = v
    t = File.read f
  end

  parser.on("-o", "--output PATH", "Specify a file to export the result of the encryption or decryption to") do |v|
    o = v
  end
end.parse!

def check_key k, a
  k.chars.each do |char|
    return false unless a.include? char
  end
  true
end

def key_error
  puts "The key that you entered is invalid! Please use only the following characters: "
  puts a.map {|char| "'#{char}'"}.join(", ") + "."
  puts "NOTE: If you are trying to use capitals or punctuation, you may want to try strict mode (--strict or -s)."
  exit
end

t_display = f ? f : t
e = m == :encrypt
a = s ? STRICT_ALPHABET : ALPHABET

key_error unless check_key k, a

m_text = e ? "encrypted" : "decrypted"
e_text = t.encrypt k, a, s, !e
e_text_display = o ? o : e_text

if e_text_display.length + t_display.length < 50
  t_display.clean_newlines
  e_text_display.clean_newlines
  line = "-" * (t_display.length+2) + "=" * (e_text_display.length+1)
  puts line
  puts "#{t_display} âžœ #{e_text_display}"
  puts line + "\n"
  puts (f ? "The contents of " : "The text ") + "\"#{t_display}\" was #{m_text} to \"#{e_text_display}\" using key: \"#{k}\""
else
  puts "\n#{t_display}\n\n"
  puts e_text_display + "\n"
end

File.new(o, "w").write e_text if o
